se
sp <- ((.001*(1-.001)) + (.00121881*(1- .00121881)))/2
sp
se <- sqrt(sp)*(1/(2*600000))
se
.001 + 2.8*se
dp
se <- sqrt(sp)*sqrt((1/(2*600000)))
se
.001 + 2.8*se
power.prop.test(p1 = .001, p2 = .00121881, sig.level = .05, power = .95)
power.prop.test(p1 = .001, p2 = .00121881, sig.level = .05, power = .9)
power.prop.test(n = 600000, p1 = .001, sig.level = .05, power = .9)
power.prop.test(n = 600000, p1 = .001, sig.level = .05, power = .91)
power.prop.test(n = 600000, p1 = .001, sig.level = .05, power = .92)
power.prop.test(n = 600000, p1 = .001, sig.level = .05, power = .93)
power.prop.test(n = 600000, p1 = .001, sig.level = .05, power = .8)
power.prop.test(n = 500000, p1 = .001, sig.level = .05, power = .8)
power.prop.test(n = 400000, p1 = .001, sig.level = .05, power = .8)
power.prop.test(n = 300000, p1 = .001, sig.level = .05, power = .8)
power.prop.test(n = 300000, p1 = .001, p2 = .0014 sig.level = .05)
power.prop.test(n = 300000, p1 = .001, p2 = .0014, sig.level = .05)
power.prop.test(n = 300000, p1 = .001, p2 = .001287496, sig.level = .05)
power.prop.test(n = 600000, p1 = .001, sig.level = .05, power = .9)
power.prop.test(n = 700000, p1 = .001, sig.level = .05, power = .9)
power.prop.test(n = 700000, p1 = .001, p2 = .001218881, sig.level = .05)
power.prop.test(n = 1000, p1 = .5, p2 = .55, sig.level = .05)
power.prop.test( p1 = .5, p2 = .55, sig.level = .05, power = .6099752)
fb_N
high_N/2
power.prop.test(p1 = .001, p2 = .0011, sig.level = .05, n = high_N/2)
power.prop.test(p1 = .001, p2 = .001001, sig.level = .05, n = high_N/2)
power.prop.test(p1 = .001, p2 = .00101, sig.level = .05, n = high_N/2)
power.prop.test(p1 = .001, p2 = .00108, sig.level = .05, n = high_N/2)
power.prop.test(p1 = .001, p2 = .00107, sig.level = .05, n = high_N/2)
power.prop.test(p1 = .001, p2 = .00106, sig.level = .05, n = high_N/2)
.001*2
.001*5
.001*10
.1*10
help(seq)
seq(.001, .01, by = .001)
seq(.001, .01, by = (.01 - .001)/100)
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/100)
unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
}
get_p2(p1 = .001, N = 500000)
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/1000)
unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
}
get_p2(p1 = .001, N = 500000)
test = get_p2(p1 = .001, N = 500000)
which.min(abs(test - .8))
test[which.min(abs(test - .8))]
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/10000)
p_list <- unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
index <- which.min(abs(p_list = .8))
p2[index]
}
get_p2(p1 = .001, N = 500000)
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/10000)
p_list <- unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
index <- which.min(abs(p_list == .8))
p2[index]
}
get_p2(p1 = .001, N = 500000)
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/10000)
p_list <- unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
index <- which.min(abs(p_list - .8))
p2[index]
}
get_p2(p1 = .001, N = 500000)
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/1000)
p_list <- unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
index <- which.min(abs(p_list - .8))
p2[index]
}
get_p2(p1 = .001, N = 500000)
p1 = .001
N = 500000
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/1000)
p_list <- unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
p_list
index <- which.min(abs(p_list - .8))
index
p2[index]
index
p2[22]
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/1000)
p_list <- unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
index <- which.min(abs(p_list - .8))
x[index]
}
get_p2(p1 = .001, N = 500000)
get_p2 <- function(p1, N) {
p2 <- 10*p1
x <- seq(p1, p2, (p2 - p1)/10000)
p_list <- unlist(lapply(x, function(x) power.prop.test(p1 = p1, p2 = x, n = N, sig.level = .05)$power))
index <- which.min(abs(p_list - .8))
x[index]
}
get_p2(p1 = .001, N = 500000)
power.prop.test(p1 = .001, p2 = .0011854, n = 500000, sig.level= .05)
power.prop.test(p1 = .001, p2 = .0011854, n = 200000, sig.level= .05)
get_p2(p1 = .0001, N = 300000)
power.prop.test(p1 = .0001, p2 = .00018658, n = 300000, sig.level= .05)
click_power <- function(N, base_p) {
N_75 <- N * 0.75
N_50 <- N * 0.5
N_s   <- c(N, N_75, N_50)
tip_p <- c(0.15, 0.1, 0.05, 0.025, 0.01)
p_list <- list()
for (i in 1:3) {
big_n <- N_s[i]
p_list[[i]] <- unlist(lapply(tip_p*base_p, get_p2))
names(p_list[[i]]) <- base_p*tip_p
}
p_frame <- dplyr::rbind_all(p_list)
final_frame <- cbind(N = N_s, base_p = rep(base_p, 3), p_frame)
final_frame
}
click_power(N = fb_N/2, base_p = fb_click)
click_power <- function(N, base_p) {
N_75 <- N * 0.75
N_50 <- N * 0.5
N_s   <- c(N, N_75, N_50)
tip_p <- c(0.15, 0.1, 0.05, 0.025, 0.01)
p_list <- list()
for (i in 1:3) {
big_n <- N_s[i]
p_list[[i]] <- unlist(lapply(tip_p*base_p, get_p2, N = big_n))
names(p_list[[i]]) <- base_p*tip_p
}
p_frame <- dplyr::rbind_all(p_list)
final_frame <- cbind(N = N_s, base_p = rep(base_p, 3), p_frame)
final_frame
}
click_power(N = fb_N/2, base_p = fb_click)
click_power <- function(N, base_p) {
N_75 <- N * 0.75
N_50 <- N * 0.5
N_s   <- c(N, N_75, N_50)
tip_p <- c(0.15, 0.1, 0.05, 0.025, 0.01)
p_list <- list()
for (i in 1:3) {
big_n <- N_s[i]
p_list[[i]] <- data.frame(unlist(lapply(tip_p*base_p, get_p2, N = big_n)))
names(p_list[[i]]) <- base_p*tip_p
}
p_frame <- dplyr::rbind_all(p_list)
final_frame <- cbind(N = N_s, base_p = rep(base_p, 3), p_frame)
final_frame
}
click_power(N = fb_N/2, base_p = fb_click)
click_power <- function(N, base_p) {
N_75 <- N * 0.75
N_50 <- N * 0.5
N_s   <- c(N, N_75, N_50)
tip_p <- c(0.15, 0.1, 0.05, 0.025, 0.01)
p_list <- list()
for (i in 1:3) {
big_n <- N_s[i]
p_list[[i]] <- data.frame(t(unlist(lapply(tip_p*base_p, get_p2, N = big_n))))
names(p_list[[i]]) <- base_p*tip_p
}
p_frame <- dplyr::rbind_all(p_list)
final_frame <- cbind(N = N_s, base_p = rep(base_p, 3), p_frame)
final_frame
}
click_power(N = fb_N/2, base_p = fb_click)
rm(list  = ls())
5733/9555556
(5733/9555556)*100
library(MapChi)
help(map_chi)
df <- data.frame(v1 = c("r", "r", "a"), v2 = 1:3)
df[, 1] <- as.factor(df[, 1])
df <- data.frame(v1 = c("r", "r", "a"), v2 = 1:3)
class(df$v1)
df$v1 = as.character(df$v1)
df[, "v1"] <- as.factor(df[, "v1"])
df
df$v1 = as.character(df$v1)
df[, "v1"] <- as.factor(df[["v1"]])
fg
df
1673*.87
16^2
256 + 8
1857/7803
1857/(1857 + 7803)
7803 + 1857
7.5*5
help(rpois)
rpois(n = 10, lambda = 3)
test <- rep(1:1000000, 5)
test
head(test)
head(test[order(test)])
help(runif)
n <- 100000
test <- rep(1:n, 5)
test <- test[order(test)]
whatev <- runif(n, 0, 1)
whatev <- runif(n*5, 0, 1)
df <- data.frame(test, whatev)
head(df)
split_test <- split(df, f = df$test)
rm(list = ls())
n <- 500000
test <- rep(1:n, 5)
test <- test[order(test)]
whatev <- runif(n*5, 0, 1)
df <- data.frame(test, whatev)
split_test <- split(df, f = df$test)
n <- 500
test <- rep(1:n, 5)
test <- test[order(test)]
whatev <- runif(n*5, 0, 1)
df <- data.frame(test, whatev)
system.time(split_test <- split(df, f = df$test))
n <- 5000
test <- rep(1:n, 5)
test <- test[order(test)]
whatev <- runif(n*5, 0, 1)
df <- data.frame(test, whatev)
system.time(split_test <- split(df, f = df$test))
.8/.04
n <- 50000
test <- rep(1:n, 5)
test <- test[order(test)]
whatev <- runif(n*5, 0, 1)
df <- data.frame(test, whatev)
system.time(split_test <- split(df, f = df$test))
14.71/.04
test_n <- c(500, 5000, 50000, 500000, 1000000, 2000000)
for (i in test_n) {
n <- i
test <- rep(1:n, 5)
test <- test[order(test)]
whatev <- runif(n*5, 0, 1)
df <- data.frame(test, whatev)
print(system.time(split_test <- split(df, f = df$test)))
}
rm(list = ls())
test_n <- c(500, 5000, 50000, 100000, 200000, 500000, 1000000, 2000000)
for (i in test_n) {
n <- i
test <- rep(1:n, 5)
test <- test[order(test)]
whatev <- runif(n*5, 0, 1)
df <- data.frame(test, whatev)
print(system.time(split_test <- split(df, f = df$test)))
}
nrow(df)
dplyr::summarise(dplyr::group_by(df, test), v = vapply(whatev, function(x) sum((x > whatev)), FUN.VALUE = numeric(1))
)
dplyr::summarise(dplyr::group_by(df, test), v = vapply(whatev, function(x) sum((x > whatev)), FUN.VALUE = numeric(5)))
dplyr::summarise(dplyr::group_by(df, test), v = vapply(whatev, function(x) sum((x > whatev)), FUN.VALUE = numeric(1)))
rm(list = ls())
q()
devtools::install_github("dmwelgus/experimentalML")
library(experimentalML)
help(perm_cvTree)
help(perm_cvRF)
q()
library(experimentalML)
help(perm_cvRF)
help(perm_cvTree)
help(perm_cvBoost)
rm(list = ls())
q()
t_fun <- function(x) {
t.test(wave_3[, x][wave_3$gen_year1or2 == 1], wave_3[, x][wave_3$gen_year1or2 == 0])
}
rm(list = ls())
# T-tests and F-Tests
library(experimentalML)
library(multiwayvcov)
library(lmtest)
data(wave_3)
t.test(wave_3$z_weightforheight_w3[wave_3$gen_year1or2 == 1], wave_3$z_weightforheight_w3[wave_3$gen_year1or2 == 0] )
t.test(wave_3$z_weightforage_w3[wave_3$gen_year1or2 == 1], wave_3$z_weightforage_w3[wave_3$gen_year1or2 == 0] )
t.test(wave_3$mal_weightforage_w3[wave_3$gen_year1or2 == 1], wave_3$mal_weightforage_w3[wave_3$gen_year1or2 == 0] )
var_list <-  c("mal_weightforage", "severe_weightforage", "mal_weightforheight", "severe_weightforheight", "mal_heightforage",
"severe_heightforage", "diarrhea_or_ARI", "dead_0to28_days_last18", "dead_0to12_mons_last24", "dead_1to12_mons_last24",
"lang_score_7to12_std", "math_score_7to12_std", "totl_score_7to12_std", "lang_score_13to15_std", "math_score_13to15_std",
"totl_score_13to15_std", "z_weightforage", "z_weightforheight", "z_heightforage")
var_list <- paste(var_list, "w3", sep = "_")
var_list2 <- c("gen_year1or2", "Location_ID", var_list)
wave_3_sub <- wave_3[, var_list2]
# Individual t-tests for the different outcomes.
t_fun <- function(x) {
t.test(wave_3[, x][wave_3$gen_year1or2 == 1], wave_3[, x][wave_3$gen_year1or2 == 0])
}
help(t.test)
t_fun <- function(x) {
t.test(wave_3[, x][wave_3$gen_year1or2 == 1], wave_3[, x][wave_3$gen_year1or2 == 0])$p.value
}
p_list <- vapply(var_list, t_fun, FUN.VALUE = numeric(1))
p_list
t.test(wave_3$mal_weightforage_w3[wave_3$gen_year1or2 == 1], wave_3$mal_weightforage_w3[wave_3$gen_year1or2 == 0] )
t.test(wave_3$severe_weightforheight_w3[wave_3$gen_year1or2 == 1], wave_3$severe_weightforheight_w3[wave_3$gen_year1or2 == 0])
rm(list = ls())
q()
log(-.3)
log(.3)
log(.01)
q()
shiny::runApp('U:/portal_apps/welgus-apps/by_ca_year')
library(jsonlite)
library(curl)
# ca_pops       <- read.csv("ca_pops.csv", stringsAsFactors = FALSE)
# district_pops <- read.csv("district_pops.csv", stringsAsFactors = FALSE)
by_region_year <- function(year, type = "All", order_by = "rate", region = "CA") {
region_list <- c(CA = "community_area", District = "district")
file_list   <- c(CA = "ca_pops.csv", District = "district_pops.csv")
name_list   <- c(CA = "ca_pops", District = "district_pops")
assign(name_list[region], file_list[region])
region <- region_list[region]
if (type == "All") {
url <- sprintf("https://data.cityofchicago.org/resource/6zsd-86xi.json?$select=%s,count(*)&$group=%s&$where=year=%s", region, region, year)
} else {
types <- c("Homicides", "Violent Crimes: Def 1", "Violent Crimes: Def 2", "Drugs", "Property")
code_list <- c("'01A'", "'01A','02','03','04A','04B'", "'01A','02','03','04A','04B','08A','08B'",
"'18'", "'05','06','07','09'")
codes <- code_list[types == type]
url <- sprintf("https://data.cityofchicago.org/resource/6zsd-86xi.json?$select=%s,count(*)&$group=%s&$where=year=%s+AND+fbi_code+in(%s)",
region, region, year, codes)
}
x <- jsonlite::fromJSON(url)
x$count <- as.integer(x$count)
if(region == "community_area") {
x <- merge(x, ca_pops, by.x = "community_area", by.y = "ca_num", all.x = TRUE, row.names = FALSE)
if (year >= 2010) {
y_col <- 5
} else {
y_col <- grep(year, names(x), fixed = TRUE)
}
x$rate <- (x$count / x[, y_col]) * 100000
if (order_by == "count") {
x <- x[order(-x$count), ]
} else {
x <- x[order(-x$rate), ]
}
x <- cbind(1:nrow(x), x)
x <- x[, c(1, 2, 3, 4, y_col + 1, 16)]
names(x) <- c(" ","CA", "Count", "Community Area", "Pop", "Rate (per 100K)")
} else {
x$district <- as.numeric(x$district)
x <- merge(x, district_pops, by = "district", all.x = TRUE, row.names = FALSE)
if (year >= 2010) {
y_col <- 5
} else {
y_col <- grep(year, names(x), fixed = TRUE)
}
x$rate <- (x$count / x[, y_col]) * 100000
if (order_by == "count") {
x <- x[order(-x$count), ]
} else {
x <- x[order(-x$rate), ]
}
x <- cbind(1:nrow(x), x)
x <- x[, c(1, 2, 3, y_col + 1, 15)]
names(x) <- c(" ","District", "Count", "Pop", "Rate (per 100K)")
}
x
}
getwd()
setwd("U:/portal_apps/welgus-apps/by_region_year")
by_region_year(year = 2004)
help(assign)
getwd()
rm(list = ls())
by_region_year <- function(year, type = "All", order_by = "rate", region = "CA") {
region_list <- c(CA = "community_area", District = "district")
file_list   <- c(CA = "ca_pops.csv", District = "district_pops.csv")
name_list   <- c(CA = "ca_pops", District = "district_pops")
assign(name_list[region], file_list[region])
region <- region_list[region]
if (type == "All") {
url <- sprintf("https://data.cityofchicago.org/resource/6zsd-86xi.json?$select=%s,count(*)&$group=%s&$where=year=%s", region, region, year)
} else {
types <- c("Homicides", "Violent Crimes: Def 1", "Violent Crimes: Def 2", "Drugs", "Property")
code_list <- c("'01A'", "'01A','02','03','04A','04B'", "'01A','02','03','04A','04B','08A','08B'",
"'18'", "'05','06','07','09'")
codes <- code_list[types == type]
url <- sprintf("https://data.cityofchicago.org/resource/6zsd-86xi.json?$select=%s,count(*)&$group=%s&$where=year=%s+AND+fbi_code+in(%s)",
region, region, year, codes)
}
x <- jsonlite::fromJSON(url)
x$count <- as.integer(x$count)
if(region == "community_area") {
x <- merge(x, ca_pops, by.x = "community_area", by.y = "ca_num", all.x = TRUE, row.names = FALSE)
if (year >= 2010) {
y_col <- 5
} else {
y_col <- grep(year, names(x), fixed = TRUE)
}
x$rate <- (x$count / x[, y_col]) * 100000
if (order_by == "count") {
x <- x[order(-x$count), ]
} else {
x <- x[order(-x$rate), ]
}
x <- cbind(1:nrow(x), x)
x <- x[, c(1, 2, 3, 4, y_col + 1, 16)]
names(x) <- c(" ","CA", "Count", "Community Area", "Pop", "Rate (per 100K)")
} else {
x$district <- as.numeric(x$district)
x <- merge(x, district_pops, by = "district", all.x = TRUE, row.names = FALSE)
if (year >= 2010) {
y_col <- 5
} else {
y_col <- grep(year, names(x), fixed = TRUE)
}
x$rate <- (x$count / x[, y_col]) * 100000
if (order_by == "count") {
x <- x[order(-x$count), ]
} else {
x <- x[order(-x$rate), ]
}
x <- cbind(1:nrow(x), x)
x <- x[, c(1, 2, 3, y_col + 1, 15)]
names(x) <- c(" ","District", "Count", "Pop", "Rate (per 100K)")
}
x
}
by_region_year(year = 2003)
region = "CA"
region_list <- c(CA = "community_area", District = "district")
file_list   <- c(CA = "ca_pops.csv", District = "district_pops.csv")
name_list   <- c(CA = "ca_pops", District = "district_pops")
assign(name_list[region], file_list[region])
ca_pops
by_region_year <- function(year, type = "All", order_by = "rate", region = "CA") {
region_list <- c(CA = "community_area", District = "district")
file_list   <- c(CA = "ca_pops.csv", District = "district_pops.csv")
name_list   <- c(CA = "ca_pops", District = "district_pops")
assign(name_list[region], read.csv(file_list[region], stringsAsFactors = FALSE))
region <- region_list[region]
if (type == "All") {
url <- sprintf("https://data.cityofchicago.org/resource/6zsd-86xi.json?$select=%s,count(*)&$group=%s&$where=year=%s", region, region, year)
} else {
types <- c("Homicides", "Violent Crimes: Def 1", "Violent Crimes: Def 2", "Drugs", "Property")
code_list <- c("'01A'", "'01A','02','03','04A','04B'", "'01A','02','03','04A','04B','08A','08B'",
"'18'", "'05','06','07','09'")
codes <- code_list[types == type]
url <- sprintf("https://data.cityofchicago.org/resource/6zsd-86xi.json?$select=%s,count(*)&$group=%s&$where=year=%s+AND+fbi_code+in(%s)",
region, region, year, codes)
}
x <- jsonlite::fromJSON(url)
x$count <- as.integer(x$count)
if(region == "community_area") {
x <- merge(x, ca_pops, by.x = "community_area", by.y = "ca_num", all.x = TRUE, row.names = FALSE)
if (year >= 2010) {
y_col <- 5
} else {
y_col <- grep(year, names(x), fixed = TRUE)
}
x$rate <- (x$count / x[, y_col]) * 100000
if (order_by == "count") {
x <- x[order(-x$count), ]
} else {
x <- x[order(-x$rate), ]
}
x <- cbind(1:nrow(x), x)
x <- x[, c(1, 2, 3, 4, y_col + 1, 16)]
names(x) <- c(" ","CA", "Count", "Community Area", "Pop", "Rate (per 100K)")
} else {
x$district <- as.numeric(x$district)
x <- merge(x, district_pops, by = "district", all.x = TRUE, row.names = FALSE)
if (year >= 2010) {
y_col <- 5
} else {
y_col <- grep(year, names(x), fixed = TRUE)
}
x$rate <- (x$count / x[, y_col]) * 100000
if (order_by == "count") {
x <- x[order(-x$count), ]
} else {
x <- x[order(-x$rate), ]
}
x <- cbind(1:nrow(x), x)
x <- x[, c(1, 2, 3, y_col + 1, 15)]
names(x) <- c(" ","District", "Count", "Pop", "Rate (per 100K)")
}
x
}
by_region_year(year = 2003)
by_region_year(year = 2003, region = "District")
district_pops <- read.csv("district_pops.csv", stringsAsFactors = FALSE)
district_pops
by_region_year(year = 2007, region = "District")
by_region_year(year = 2009, region = "District")
rm(list = ls())
q()
